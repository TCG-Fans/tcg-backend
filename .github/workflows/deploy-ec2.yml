name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]  # Replace with your main branch (main or master)

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Create deployment package
      run: |
        # Create an archive with required files
        tar -czf deploy.tar.gz dist package*.json Dockerfile docker-compose.yml src .env.example tsconfig.json

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Copy deployment package to EC2
      run: |
        # Copy archive directly to EC2
        scp -i ~/.ssh/id_rsa deploy.tar.gz ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/deploy.tar.gz

    - name: Deploy to EC2 instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "Starting application deployment..."
          
          # Create deployment directory if it doesn't exist
          mkdir -p ~/app
          cd ~/app
          
          # Copy archive from home directory
          echo "Copying archive..."
          cp ~/deploy.tar.gz ./deploy.tar.gz
          
          # Unpack archive
          echo "Unpacking archive..."
          tar -xzf deploy.tar.gz
          rm deploy.tar.gz
          rm ~/deploy.tar.gz  # Remove original archive
          
          # Copy .env file if it exists
          if [ -f ~/.env ]; then
            echo "Copying existing .env file..."
            cp ~/.env ./.env
          elif [ -f .env.example ]; then
            echo "Creating .env from example..."
            cp .env.example .env
            echo "WARNING: Created .env from example. Environment variables need to be updated!"
          else
            echo "WARNING: .env.example file not found! Creating empty .env file."
            touch .env
          fi
          
          # Check Docker installation
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt update
            sudo apt install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt update
            sudo apt install -y docker-ce
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Check Docker Compose installation
          if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo apt install -y docker-compose-plugin || {
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
            }
          fi
          
          # Check which Docker Compose command is available
          if command -v docker-compose &> /dev/null; then
            DOCKER_COMPOSE_CMD="docker-compose"
          else
            DOCKER_COMPOSE_CMD="docker compose"
          fi
          
          # Launch application via Docker Compose
          echo "Starting the application..."
          sudo $DOCKER_COMPOSE_CMD down || true
          sudo $DOCKER_COMPOSE_CMD up -d --build
          
          # Clean up old images
          echo "Cleaning unused Docker images..."
          sudo docker image prune -af
          
          echo "Deployment completed successfully!"
